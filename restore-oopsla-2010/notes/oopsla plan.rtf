{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green39\blue0;\red1\green194\blue9;\red1\green194\blue9;
\red255\green139\blue0;}
\margl1440\margr1440\vieww10680\viewh17040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs36 \cf0 OOPSLA Plan
\fs24 \
\

\b\fs28 \ul Examples
\b0\fs24 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\fs28 \cf0 \
Booleans:
\fs24 \
(new field) 
\b Azureus
\b0  force_status\
\

\fs28 Assignment:
\fs24 \
(leak) 
\b Azureus
\b0  leak-1\
(leak) 
\b Azureus
\b0  ByteBufferPool \cf2 critical\cf0 \
(leak) 
\b jEdit
\b0  tokenMarker \cf3 working\cf0 \
\

\fs28 Integers:
\fs24 \
\

\fs28 Strings:
\fs24 \
(null pointer bug fix) 
\b Azureus
\b0  MessageBoxShell\
(new fields) 
\b Java Email Server ?
\b0  \cf2 critical \cf4 working\cf0 \
\

\fs28 Collections:
\fs24 \
(leak) 
\b Azureus
\b0  parameterListeners\
(new fields) 
\b Synthetic Azureus
\b0  partitioning based on sentinel value \cf2 critical\cf0 \
(leak) 
\b Derby
\b0  clearDependencies \cf5 highly desirable\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 Totals:
\b0 \
  Azureus 6\
  Derby 1\
  jEdit 1\
  Java Email Server ?\
  Eclipse ?\

\b Goal:
\b0  at least 6 examples from 3 applications\

\b Todo
\b0 : Mine the Jvolve paper for examples\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b\fs28 \cf0 \ul \ulc0 Theory
\b0\fs24 \ulnone \
\
1. Matching / Synthesis to support the examples\
2. Quantitative certainty metric (PAC-style?)\
3. How to choose objects / fields? (slicing?)\
\

\b\fs28 \ul Timeline
\b0\fs24 \ulnone \
\
    
\b Azureus
\b0  ByteBufferPool\
    
\b Azureus
\b0  force_status\
    
\b Azureus
\b0  MessageBoxShell*\
    
\b Synthetic Azureus
\b0 *
\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0 \cf0     two choices:\
      
\b Azureus
\b0  parameterListeners\
    or:\
      search for more examples we can already handle\
* These can be swapped depending on whether we want to go for Strings or Collections first.\
\
Suriya's examples:\
    
\b jEdit
\b0  tokenMarker\
    
\b Java Email Server\

\b0     
\b Derby
\b0  clearDependencies\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 General TODOs
\b0 :\
Write an abstract.  What the evaluation showed us.  What it all means.\
we are considering more interesting updates than what has been considered in prior work.\
leaks, for example, have not been explored before\
check POLIS guys work first, they may have looked at leaks\
see if Ginseng transformers could be handled by our approach\
when doing collections, try to keep support for testing equality with arbitrary constants\
try to be more efficient by considering pairs of examples instead of one at a time\
\
mention synthesis more generally\
drop the mention that we're "inspired by" sumit's approach (since we had started the work before)\
compare to other synthesis stuff at e.g. PLDI\
highlight auto-generating examples as a contribution\
we sort of do some synthesis-like stuff as we are matching input-output examples\
say that it's subtle\
change tone so that we aren't assuming knowledge of string work\
\

\b notes:
\b0 \
We rank fields based on how likely they are to randomly match.  i.e. strings are ranked higher than ints, which are higher than bools.\
We prefer synthesized functions that are more likely to generalize.  i.e. everything else is preferred over constant initializers.\
We had to fix a bug where the forwarded addresses in the config file were not being read in order to get the JavaEmailServer example to work.}